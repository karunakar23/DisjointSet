class DisjointSet{
    int[] parent;
    int[] rank;
    int[] size;
    DisjointSet(int n){
        parent=new int[n+1];
        rank=new int[n+1];
        size=new int[n+1];
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    
    public int findUltimateParent(int x){
        if(x==parent[x]){
            return x;
        }
       
       return parent[x]=findUltimateParent(parent[x]);
    }
    
    public void unionByRank(int u,int v){
        int ultimateParentOfU=findUltimateParent(u);
        int ultimateParentOfV=findUltimateParent(v);
        if(ultimateParentOfU==ultimateParentOfV) return;
        if(rank[ultimateParentOfU]>rank[ultimateParentOfV]){
            parent[ultimateParentOfV]=parent[ultimateParentOfU];
        }else if(rank[ultimateParentOfU]<rank[ultimateParentOfV]){
            parent[ultimateParentOfU]=parent[ultimateParentOfV];
        }else{
            parent[ultimateParentOfU]=parent[ultimateParentOfV];
            rank[ultimateParentOfV]++;
        }
        
    }
    public void unionBySize(int u,int v){
        int ultimateParentOfU=findUltimateParent(u);
        int ultimateParentOfV=findUltimateParent(v);
        if(ultimateParentOfU==ultimateParentOfV) return;
        if(size[ultimateParentOfU]>size[ultimateParentOfV]){
            parent[ultimateParentOfV]=parent[ultimateParentOfU];
            size[ultimateParentOfU]=size[ultimateParentOfU]+size[ultimateParentOfV];
        }else if(rank[ultimateParentOfU]<rank[ultimateParentOfV]){
            parent[ultimateParentOfU]=parent[ultimateParentOfV];
            size[ultimateParentOfV]=size[ultimateParentOfV]+size[ultimateParentOfU];
        }else{
            parent[ultimateParentOfU]=parent[ultimateParentOfV];
            size[ultimateParentOfV]=size[ultimateParentOfV]+size[ultimateParentOfU];
        }
    }
    
    
}
